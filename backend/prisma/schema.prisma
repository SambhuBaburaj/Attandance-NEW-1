// Complete Prisma Schema for Attendance Management System
// Aligned with complete_database_schema.sql

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum Role {
  ADMIN
  TEACHER
  PARENT
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  EXCUSED
}

// Core Models

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  teacherProfile    TeacherProfile?
  parentProfile     ParentProfile?
  markedAttendance  Attendance[]
  sentNotifications ParentNotification[] @relation("SentNotifications")
  
  @@map("users")
}

model School {
  id              String   @id @default(cuid())
  name            String
  address         String
  phone           String?
  email           String?
  principalName   String?
  establishedYear Int?
  website         String?
  logo            String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  classes            Class[]
  attendanceSettings AttendanceSettings?
  holidays           Holiday[]
  
  @@map("schools")
}

model TeacherProfile {
  id           String    @id @default(cuid())
  userId       String    @unique
  employeeId   String    @unique
  phone        String?
  address      String?
  qualification String?
  experience   Int?
  salary       Decimal?  @db.Decimal(10, 2)
  joiningDate  DateTime? @db.Date
  isActive     Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  classes       Class[]
  messages      ParentMessage[]
  classSubjects ClassSubject[]
  
  @@map("teacher_profiles")
}

model ParentProfile {
  id                   String    @id @default(cuid())
  userId               String    @unique
  phone                String?
  alternatePhone       String?
  address              String?
  occupation           String?
  workAddress          String?
  emergencyContact     String?
  emergencyContactName String?
  relationship         String?   @default("Father")
  notifications        Boolean   @default(true)
  whatsappOptIn        Boolean   @default(true)
  emailOptIn           Boolean   @default(true)
  lastLoginAt          DateTime?
  profilePicture       String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Relations
  user                User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  children            Student[]            @relation("ParentChildren")
  parentNotifications ParentNotification[]
  sentMessages        ParentMessage[]
  
  @@map("parent_profiles")
}

model Class {
  id          String   @id @default(cuid())
  name        String
  grade       String
  section     String   @default("A")
  capacity    Int?     @default(30)
  schoolId    String
  teacherId   String?
  description String?
  roomNumber  String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school        School         @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  teacher       TeacherProfile? @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  students      Student[]
  attendance    Attendance[]
  classSubjects ClassSubject[]
  
  @@map("classes")
}

model Student {
  id                String    @id @default(cuid())
  name              String
  rollNumber        String    @unique
  dateOfBirth       DateTime? @db.Date
  gender            String?
  address           String?
  phone             String?
  email             String?
  classId           String
  parentId          String
  admissionDate     DateTime? @db.Date
  bloodGroup        String?
  medicalConditions String?
  profilePicture    String?
  isActive          Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  class         Class                @relation(fields: [classId], references: [id], onDelete: Cascade)
  parent        ParentProfile        @relation("ParentChildren", fields: [parentId], references: [id], onDelete: Cascade)
  attendance    Attendance[]
  notifications ParentNotification[]
  messages      ParentMessage[]
  
  @@map("students")
}

model Attendance {
  id           String           @id @default(cuid())
  studentId    String
  classId      String
  date         DateTime         @db.Date
  status       AttendanceStatus @default(ABSENT)
  markedBy     String
  remarks      String?
  checkInTime  String?
  checkOutTime String?
  markedAt     DateTime         @default(now())
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  marker  User    @relation(fields: [markedBy], references: [id], onDelete: Cascade)
  
  @@unique([studentId, date])
  @@index([classId, date])
  @@index([date])
  @@index([markedBy])
  @@map("attendance")
}

model ParentNotification {
  id        String    @id @default(cuid())
  parentId  String
  studentId String?   // Made optional for general notifications
  type      String    // 'ABSENCE', 'ATTENDANCE_SUMMARY', 'SCHOOL_ANNOUNCEMENT', 'CUSTOM', 'GENERAL'
  title     String
  message   String
  isRead    Boolean   @default(false)
  sentBy    String?   // ID of user who sent the notification (for custom messages)
  priority  String    @default("NORMAL") // 'HIGH', 'NORMAL', 'LOW'
  sentAt    DateTime  @default(now())
  readAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  parent  ParentProfile @relation(fields: [parentId], references: [id], onDelete: Cascade)
  student Student?      @relation(fields: [studentId], references: [id], onDelete: Cascade)
  sender  User?         @relation("SentNotifications", fields: [sentBy], references: [id], onDelete: SetNull)
  
  @@index([parentId])
  @@index([studentId])
  @@index([type])
  @@index([sentBy])
  @@map("parent_notifications")
}

model ParentMessage {
  id        String    @id @default(cuid())
  parentId  String
  teacherId String
  studentId String?
  subject   String
  message   String
  isRead    Boolean   @default(false)
  readAt    DateTime?
  replyToId String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  parent  ParentProfile  @relation(fields: [parentId], references: [id], onDelete: Cascade)
  teacher TeacherProfile @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  student Student?       @relation(fields: [studentId], references: [id], onDelete: Cascade)
  replyTo ParentMessage? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies ParentMessage[] @relation("MessageReplies")
  
  @@index([parentId])
  @@index([teacherId])
  @@index([studentId])
  @@map("parent_messages")
}

// Extended Models for Academic Management

model Subject {
  id          String   @id @default(cuid())
  name        String
  code        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  classSubjects ClassSubject[]
  
  @@index([isActive])
  @@map("subjects")
}

model ClassSubject {
  id        String   @id @default(cuid())
  classId   String
  subjectId String
  teacherId String?
  createdAt DateTime @default(now())

  // Relations
  class   Class           @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject Subject         @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  teacher TeacherProfile? @relation(fields: [teacherId], references: [id], onDelete: SetNull)
  
  @@unique([classId, subjectId])
  @@index([classId])
  @@index([subjectId])
  @@index([teacherId])
  @@map("class_subjects")
}

model Holiday {
  id          String   @id @default(cuid())
  name        String
  date        DateTime @db.Date
  description String?
  isRecurring Boolean  @default(false)
  schoolId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  school School? @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  @@index([schoolId])
  @@index([date])
  @@map("holidays")
}

model AttendanceSettings {
  id                   String   @id @default(cuid())
  schoolId             String   @unique
  autoMarkAbsentAfter  String   @default("10:00:00")
  lateThresholdMinutes Int      @default(15)
  notificationEnabled  Boolean  @default(true)
  dailySummaryTime     String   @default("18:00:00")
  weeklySummaryDay     Int      @default(5) // Friday
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  
  @@map("attendance_settings")
}